# vim:fileencoding=utf-8:ft=conf

# Fonts {{{
# Font family.
#
# Get full family name list by running kitty list-fonts
font_family      Fira Code
italic_font      auto
bold_font        auto
bold_italic_font auto

# Font size (in pts)
font_size        14.0

# The amount the font size is changed by (in pts) when increasing/decreasing
# the font size in a running terminal.
font_size_delta 2


# Adjust the cell dimensions.
# Examples:
# 5 (5 pixels larger), 120% (120% of default)
# -10 (10 pixels smaller), 50% (50% of default)
adjust_line_height 0
adjust_column_width 0

# Symbol mapping. Map the specified unicode codepoints to a particular font.

# Syntax:
# codepoints: <code>("," or "-")<code>
# code: U+<hex>
# symbol_map <codepoints> <Font> [Family Name]
#
# symbol_map U+E0A0-U+E0A2,U+E0B0-U+E0B3 PowerlineSymbols

# Change the sizes of the lines used for the box drawing unicode characters
# These values are in pts. They will be scaled by the monitor DPI to arrive at
# a pixel value. There must be four values corresponding to thin, normal, thick,
# and very thick lines;
box_drawing_scale 0.001, 1, 1.5, 2
# }}}


# Cursor customization {{{

# block, beam, underline
cursor_shape     block

# Cursor blinking interval. 0 disables blinking. Clamped below repaint_delay.
cursor_blink_interval     0
# Number of seconds of keyboard inactivity before blinking stops. 0 disables.
cursor_stop_blinking_after 0
# }}}


# Scrollback {{{
scrollback_lines 2000

# Program with which to view scrollback in a new window. The scrollback buffer is passed as
# STDIN to this program. If you change it, make sure the program you use can
# handle ANSI escape sequences for colors and text formatting.
# scrollback_pager less +G -R
scrollback_pager vipe >/dev/null

# Wheel scroll multiplier (modify the amount scrolled by the mouse wheel). Use negative
# numbers to change scroll direction.
wheel_scroll_multiplier 5.0
# }}}


# Mouse {{{
# none, single, double, curly
url_style single

# <open_url_modifiers><mouse-1> -> open URL
open_url_modifiers ctrl+shift

# Open URL with this program. "default" means use operating system default.
open_url_with default

copy_on_select no

# <rectangle_select_modifiers><mouse-1> -> rectangle select
rectangle_select_modifiers ctrl+alt

# Extra characters considered part of a word when double clicking.
select_by_word_characters :@-./_~?&=%+#

# double / triple click interval
click_interval 0.5

# Hide cursor after this number of seconds of mouse inactivity. 0 disables.
mouse_hide_wait 0
# }}}


# Performance tuning {{{
# Delay (in milliseconds) between screen updates.
repaint_delay    10

# Delay (in milliseconds) before input from the program running in the terminal
# is processed.
input_delay 3

# VSync. Tearing may occur when turned off.
sync_to_monitor no
# }}}


# Audio/visual bell {{{
# Visual bell duration. 0 disables.
visual_bell_duration 0.0

# Enable/disable the audio bell. Useful in environments that require silence.
enable_audio_bell no
# }}}


# Window layout {{{
# kitty has vim-like idea of windows and tabs.

remember_window_size   yes
# Used when remember_window_size is disabled.
initial_window_width   640
initial_window_height  400

# Enabled window layouts. First one is the default. * means all.
# Currently available: stack, tall, grid, horizontal, vertical
# C-S-l switches layouts. C-S-t is new tab, and C-S-‚èé is new window.
enabled_layouts tall,grid,horizontal,vertical,stack

focus_follows_mouse no

# Window border width in pixels. Shown when there's more then one window.
window_border_width 1

# The window margin (in pts) (blank area outside the border)
window_margin_width 0

# The window padding (in pts) (blank area between the text and the window border)
window_padding_width 0

inactive_text_alpha 1.0
# }}}


# Tab bar {{{
# Which edge to show the tab bar on, top or bottom
tab_bar_edge bottom

# The separator between tabs in the tab bar
tab_separator " | "

# Tab bar styles
active_tab_font_style bold-italic
inactive_tab_font_style normal
# }}}


# Color scheme {{{

cursor           #CCCCCC
foreground       #CCCCCC
background       #1B1D1E
# 0 (fully transparent) - 1 (opaque). Impacts performance if not at 1.
background_opacity 1.0

selection_foreground #1B1D1E
selection_background #CCCCCC
active_tab_foreground #1B1D1E
active_tab_background #CCCCCC
inactive_tab_foreground #CCCCCC
inactive_tab_background #1B1D1E

active_border_color #D63AE1
inactive_border_color #cccccc

url_color #FFFFFF

# The 16 terminal colors. There are 8 basic colors, each color has a dull and
# bright version.
# https://github.com/zhou13/molokai-terminal/blob/master/xterm/Xresources
# black darkgray
color0    #1B1D1E
color8    #808080
# darkred red
color1    #FF0044
color9    #F92672
# darkgreen green
color2    #82B414
color10   #A6E22E
# darkyellow yellow
color3    #FD971F
color11   #E6DB74
# darkblue blue
color4    #266C98
color12   #7070F0
# darkmagenta magenta
color5    #AC0CB1
color13   #D63AE1
# darkcyan cyan
color6    #AE81FF
color14   #66D9EF
# gray white
color7    #CCCCCC
color15   #F8F8F2
# }}}


# Advanced {{{

# Startup shell. "." means use current user's default shell.
shell .

# Close the window when the child process (shell) exits. If no (the default),
# the terminal will remain open when the child exits as long as there are still
# processes outputting to the terminal (for example disowned or backgrounded
# processes). If yes, the window will close as soon as the child process exits.
# Note that setting it to yes means that any background processes still using
# the terminal can fail silently because their stdout/stderr/stdin no longer
# work.
close_on_child_death no

# Allow other programs to control kitty. If you turn this on other programs can
# control all aspects of kitty, including sending text to kitty windows,
# opening new windows, closing windows, reading the content of windows, etc.
# Note that this even works over ssh connections.
allow_remote_control no

# $TERM
term xterm-kitty


# }}}


# Keyboard shortcuts {{{
# For a list of key names, see: http://www.glfw.org/docs/latest/group__keys.html
# For a list of modifier names, see: http://www.glfw.org/docs/latest/group__mods.html
#
# You can use the special action no_op to unmap a keyboard shortcut that is
# assigned in the default configuration.
#
# You can combine multiple actions to be triggered by a single shortcut, using the
# syntax below:
# map key combine <separator> action1 <separator> action2 <separator> action3 ...
# For example:
# map ctrl+shift+e combine : new_window : next_layout
# this will create a new window and switch to the next available layout

# Clipboard {{{
map ctrl+shift+v        paste_from_clipboard
map ctrl+shift+s        paste_from_selection
map ctrl+shift+c        copy_to_clipboard
map shift+insert        paste_from_selection
# You can also pass the contents of the current selection to any program using
# pass_selection_to_program. By default, the system's open program is used, but
# you can specify your own, for example:
# map ctrl+shift+o      pass_selection_to_program firefox
map ctrl+shift+o        pass_selection_to_program
# }}}

# Scrolling {{{
map ctrl+shift+up        scroll_line_up
map ctrl+shift+down      scroll_line_down
map ctrl+shift+k         scroll_line_up
map ctrl+shift+j         scroll_line_down
map ctrl+shift+page_up   scroll_page_up
map ctrl+shift+page_down scroll_page_down
map ctrl+shift+home      scroll_home
map ctrl+shift+end       scroll_end
map ctrl+shift+h         show_scrollback
# }}}

# Window management {{{
map ctrl+shift+enter    new_window
map ctrl+shift+n        new_os_window
map ctrl+shift+w        close_window
map ctrl+shift+]        next_window
map ctrl+shift+[        previous_window
map ctrl+shift+f        move_window_forward
map ctrl+shift+b        move_window_backward
map ctrl+shift+`        move_window_to_top
map ctrl+shift+1        first_window
map ctrl+shift+2        second_window
map ctrl+shift+3        third_window
map ctrl+shift+4        fourth_window
map ctrl+shift+5        fifth_window
map ctrl+shift+6        sixth_window
map ctrl+shift+7        seventh_window
map ctrl+shift+8        eighth_window
map ctrl+shift+9        ninth_window
map ctrl+shift+0        tenth_window
# You can open a new window running an arbitrary program, for example:
# map ctrl+shift+y      new_window mutt
#
# You can pass the current selection to the new program by using the @selection placeholder
# map ctrl+shift+y      new_window less @selection
#
# You can even send the contents of the current screen + history buffer as stdin using
# the placeholders @text (which is the plain text) and @ansi (which includes text styling escape codes).
# For only the current screen, use @screen or @ansi_screen.
# For example, the following command opens the scrollback buffer in less in a new window.
# map ctrl+shift+y      new_window @ansi less +G -R
#
# You can open a new window with the current working directory set to the
# working directory of the current window using
# map ctrl+alt+enter    new_window_with_cwd
# }}}

# Tab management {{{
map ctrl+shift+right    next_tab
map ctrl+shift+tab      next_tab
map ctrl+shift+left     previous_tab
map ctrl+shift+t        new_tab
map ctrl+shift+q        close_tab
map ctrl+shift+l        next_layout
map ctrl+shift+.        move_tab_forward
map ctrl+shift+,        move_tab_backward
map ctrl+shift+alt+t       set_tab_title
# You can also create shortcuts to go to specific tabs, with 1 being the first tab
# map ctrl+alt+1          goto_tab 1
# map ctrl+alt+2          goto_tab 2

# Just as with new_window above, you can also pass the name of arbitrary
# commands to run when using new_tab and use new_tab_with_cwd.
# }}}

# Layout management {{{
# You can create shortcuts to switch to specific layouts
# map ctrl+alt+1          goto_layout tall
# map ctrl+alt+2          goto_layout stack
# }}}

# Font sizes {{{
map ctrl+shift+equal    increase_font_size
map ctrl+shift+minus    decrease_font_size
map ctrl+shift+backspace restore_font_size
# To setup shortcuts for specific font sizes, follow the example below:
# map ctrl+shift+f6     set_font_size 10.0
# map ctrl+shift+f7     set_font_size 20.5
# }}}

# Miscellaneous {{{
map ctrl+shift+f11      toggle_fullscreen
map ctrl+shift+u        input_unicode_character
map ctrl+shift+f2       edit_config_file
# Open a currently visible URL using the keyboard. The program used to open the URL is specified in open_url_with.
# You can customize how the URLs are detected and opened by specifying command line options to
# url_hints. For example:
# map ctrl+shift+e        run_simple_kitten text url_hints --program firefox --regex "http://[^ ]+"
map ctrl+shift+e        run_simple_kitten text url_hints

# Sending arbitrary text on shortcut key presses
# You can tell kitty to send arbitrary (UTF-8) encoded text to
# the client program when pressing specified shortcut keys. For example:
# map ctrl+alt+a send_text all Special text
# This will send "Special text" when you press the Ctrl+Alt+a key combination.
# The text to be sent is a python string literal so you can use escapes like
# \x1b to send control codes or \u21fb to send unicode characters (or you can
# just input the unicode characters directly as UTF-8 text). The first argument
# to send_text is the keyboard modes in which to activate the shortcut. The possible
# values are normal or application or kitty or a comma separated combination of them.
# The special keyword all means all modes. The modes normal and application refer to
# the DECCKM cursor key mode for terminals, and kitty refers to the special kitty
# extended keyboard protocol. Another example, that outputs a word and then moves the cursor
# to the start of the line (same as pressing the Home key):
# map ctrl+alt+a send_text normal Word\x1b[H
# map ctrl+alt+a send_text application Word\x1bOH
# }}}

# }}}


# OS specific tweaks {{{

# Change the color of the kitty window's titlebar on macOS. A value of "system"
# means to use the default system color, a value of "background" means to use
# the default background color and finally you can use an arbitrary color, such
# as #12af59 or "red".
macos_titlebar_color system

# Hide the kitty window's title bar on macOS.
macos_hide_titlebar no

# Use the option key as an alt key. With this set to no, kitty will use
# the macOS native Option+Key = unicode character behavior. This will
# break any Alt+key keyboard shortcuts in your terminal programs, but you
# can use the macOS unicode input technique.
macos_option_as_alt yes

# The number is a percentage of maximum volume.
# See man XBell for details.
x11_bell_volume 80
# }}}
